---
layout: post
title:  "New Post Test"
date:   2023-05-12 14:38:08 +0900
categories: jekyll update
aliases: ['regex']
---

# 정의
---
혹시 정규 표현식(Regular Expression, 이하 정규식)이라고 들어본 적이 있는가? 
이는 어느 텍스트 안에서 우리가 관심있는 일정한 패턴을 띄는 문자열을 찾으려고 할 때 자주 사용된다. 
이렇게 찾아낸 문자열을 분석하거나 손쉽게 다른 문자열로 변경할 수도 있다. 
이 정규식을 간단히 말하자면, **메타 문자(특수한 문자 혹은 기호)를 이용하여 이루어진 패턴**을 말한다.

```java
http:\/\/[a-zA-Z0-9\-]+\.[a-zA-Z0-9\-]+\.[a-zA-Z0-9\-]+
```

# 정규식 엔진의 내부 동작 방식(How a Regex Engine Works Internally)
---
정규식 엔진이 어떻게 돌아가는지 알면 더 나은 정규식을 더 쉽게 만들 수 있다.
어떤 정규식이 내가 처음에 예상했던 대로 돌아가지 않는 이유를 빠르게 이해하는 데 도움이 된다.
이를 알고 나면 더 복잡한 정규식을 작성할 때 수많은 추측과 고심을 줄일 수 있다.

정규식의 구현체는 구문과 동작에서 어떤 구현체는 약간씩, 또 어떤 구현체는 크게 다를 수 있지만 기본적으로 <mark style="background: #FF5582A6;">텍스트 지향 엔진(text-directed engines)</mark>과 <mark style="background: #FF5582A6;">정규식 지향 엔진(regex-directed engines)</mark>과 같이 두 개의 정규식 엔진이 있다. 현대에는 정규식 지향 엔진을 많이 사용하고 있는데, 이는 게으른 <mark style="background: #BBFABBA6;">수량자(lazy quantifier)</mark>나 <mark style="background: #BBFABBA6;">역참조(quantifier)</mark> 같은 유용한 일부 기능들이 정규식 지향 엔진에서만 구현할 수 있기 때문이다.

## 정규식 지향 엔진(regex-directed engines)
---
정규식 지향 엔진은 정규식을 차례차례 살펴보면서 정규식의 다음 **토큰**을 다음 문자와 일치시키려고 시도한다. 
일치하는 것이 발견되면 엔진은 **정규식의 그 다음 토큰과 문자**를 살펴본다. 만약에 일치하지 않으면 다른 경로를 시도할 수 있는 **이전 지점**으로 되돌아간다(backtracking).

## 텍스트 지향 엔진(text-directed engines)
---
텍스트 지향 엔진은 다음 문자로 전진하기 전에 정규식의 모든 순열을 시도하면서 주어진 문자열을 차례차례 살펴나간다. 텍스트 지향 엔진은 절대로 되돌아가지 않는다. 따라서 텍스트 지향 엔진의 매칭 과정에 대해서는 논의할 것이 별로 없다.

# 1. 간단한 문자열 찾기
한글과 영문자, 숫자를 포함한 대부분의 문자는 정규식에서 특별한 의미를 가지지 않는다. 즉, **어떤 문자 하나가 그대로 해당 문자 하나를 나타낸다**.
따라서 `ABC`라는 정규식을 사용하면 `ABC`라는 문자열에만 매치된다. 
보통은 *대소문자를 구분*하므로 `aBC`, `aBc`, `abC`와 같은 문자열과는 매치되지 않는다. 
필요에 따라서 플래그를 지정하여 대소문자를 구분하지 않도록 만들 수 있지만, 편의를 위해 이에 관해서는 후반부에 몰아서 설명한다.

  ![[Attachments_Regex_P01.png]]

## .: 모든 문자 일치시키기
---
<mark style="background: #FF5582A6;">온점(.)</mark>은 **해당 문자가 무엇이든지에 관계없이 하나의 문자와 매치**된다. 유일한 예외는 **개행(line break)** 문자이다. 
이러한 예외는 역사적인 이유 때문이다. 
정규식을 사용했던 최초의 툴들은 행 기반(line-based)이었다. 
이 툴들은 파일을 한 줄씩 읽고, 정규식을 각 줄에 개별적으로 적용했다. 
즉, 이러한 툴들을 사용하면 문자열에는 개행이 들어갈 수 없으므로 온점(.)은 개행과 일치하지 않는다. 
하지만 현대의 툴과 언어에서는 *매우 큰 문자열이나 전체 파일에 정규식을 적용할 수 있다*. 따라서 거의 대부분 개행을 포함한 모든 문자를 온점(.)에 일치시키는 옵션이 있다. 예를 들어서 [regex101](https://regex101.com/)에서는 기본적으로 `단일 행(single line)` 옵션이 꺼져있다. 이 옵션을 키면 개행을 포함한 문자를 온점에 매치시킬 수 있다.

![[Attachments_Regex_P02.png]]

# 2. 앵커(Anchors)
---
앵커는 어떤 문자와도 전혀 일치하지 않는다. 
대신에 문자의 **앞**, **뒤**, 혹은 **사이의 위치**와 매치된다. 예를 들어서 *`캐럿(^)`* 은 문자열에서 첫 번째 문자 앞의 위치와 매치된다. 따라서 문자열 `abc`에서 정규식 `^a`를 적용하면 `a`와 매치된다. `^b`는 문자열이 시작된 직후에 b가 아닌 a가 등장하기 때문에 `abc`와 전혀 매치되지 않는다. 마찬가지로 *`$`* 는 문자열의 마지막 문자 바로 뒤의 위치와 매치된다. 예를 들어서, 정규식 `c$`는 문자열 `abc`에서 `c`와 매치되지만 `a$`를 사용하면 전혀 매치되지 않는다.

| 앵커 | 나타내는 위치   |
| ---- | --------------- |
| ^    | 첫 번째 문자 앞 |
| $    | 마지막 문자 뒤  | 

# 3. 얼터네이션(Alternation)
---
리터럴 텍스트 `cat` 혹은 `dog`를 찾으려면 세로 막대(혹은 파이프 기호)인 `|`을 사용하여 `cat|dog`와 같이 구분할 수 있다. 이는 보는 바와 같이 <mark style="background: #FF5582A6;">OR</mark>을 나타내는 메타 문자이다. 여기서 mouse나 fish도 찾고 싶다면 `cat|dog|mouse|fish`로 확장하면 된다.

<mark style="background: #FF5582A6;">얼터네이션 연산자( | )</mark>는 모든 정규식 연산자 중에서 *우선순위가 가장 낮다*. 
즉, 정규식 엔진이 수직 막대로 *구분된 각 칸에 있는 모든 걸 일치시키도록 지시*한다. 
이 *범위를 제한*시키려면 `(cat|dog)`와 같이 괄호를 사용해서 그룹을 만들어야 한다. 

# 4. 문자 집합(Character Set)
---
<mark style="background: #FF5582A6;">문자 클래스(character class) 혹은 문자 집합(character set)</mark>을 사용하면 정규식 엔진이 여러 문자 중 하나만 매치 시키도록 지정할 수 있다. *대괄호(`[]`) 사이에 매치시킬 문자를 넣기만 하면 된다.* a 또는 e를 매치시키려면 `[ae]`를 사용하면 된다. ABC, ABD, ABE 중 하나를 일치시키려면 정규식을 `AB[CDE]`와 같이 작성할 수 있다. 

![[Attachments_Regex_P06.png|300]]

이렇게 하면 대괄호 안에 있는 문자 집합 중에서 하나의 문자가 그 자리에 올 수 있음을 나타낼 수 있다. 여기서 문자 집합 내의 문자 순서는 중요하지 않으며 결과는 동일하다.

![[Attachments_Regex_P04.png]]

## 문자의 범위
---
`[0-9]`, `[A-Z]`와 같이 하이픈(-)을 사용해서 `[시작문자-끝문자]`로 문자의 범위를 나타낼 수 있다. 여기서 시작 문자는 끝 문자보다 작거나 같아야 한다. 즉, `[9-0]`, `[Z-A]`로는 쓸 수 없다는 소리다. 예를 들어서 `0[xX][A-Fa-f0-9]+`은 C 스타일의 16진수를 찾을 수 있다.

```ad-tip: 어느 문자가 더 큰지 어떻게 알 수 있을까?
이는 [유니코드 테이블](https://unicode-table.com/kr/)에서 `U+0021` 같은 코드 포인트, 즉 문자에 부여된 숫자값을 통해서 알 수 있다. 대문자 A에서는 U+0041(65)이, 대문자 Z에서는 U+005A(90)를 확인할 수 있으므로 대문자 Z가 더 크다. 보통은 유니코드 테이블에서 코드 테이블을 확인하는 일은 드물며, `[0-9]`, `[a-z]`와 같이 전형적인 범위를 주로 사용한다.
```

![[Attachments_Regex_P07.png]]

위 표의 정규식과 같이 소문자, 대문자, 숫자 범위 등을 간단하게 표현할 수 있다. 중간에 `[a-zA-Z]`처럼 범위를 연달아서 쓸 수도 있으며, `[a-zA-Z_ ]`와 같이 *범위와 단일 문자를 혼용해서 사용할 수도 있다.*

## 부정 문자 집합
---
이번에는 문자 집합 안에 있는 문자가 아닌 문자를 나타내고 싶다고 해보자. 그러면 `[^0123456789]`, `[^0-9]`와 같이 여는 대괄호(`[`) 앞에 캐럿(^)을 붙이면 된다. 예를 들어서, `[^0-9]`는 숫자가 아닌 문자를 나타낸다. 정규식 `ABC[^0-9]`는 다음과 같다. 따라서 `ABC3`, `ABC4`와는 매치되지 않고, `ABCD`, `ABC라`, `ABCd` 등의 문자열과 매치된다.

![[Attachments_Regex_P08.png]]

## 문자 이스케이프
---
대부분의 정규식에서 문자 집합 안의 특수 문자 혹은 메타 문자는 닫는 *괄호(`]`), 역슬래시(`\`), 캐럿(^), 하이픈(-)* 뿐이다. 정규식의 메타 문자는 문자 집합 안에서는 그저 일반 문자이며 백슬래시로 이스케이프할 필요가 없다. 예를 들어서 별표(`*`)와 더하기 기호(+)를 찾으려면 `[+*]`를 사용하면 된다.

만약에 *하이픈(-)을 찾으려면* 여는 괄호(`[`)의 바로 뒤, 닫는 괄호(`]`)의 바로 앞, 부정 캐럿(^)의 바로 뒤에 넣을 수 있다. 예를 들어서 `[-x]`와 `[x-]`는 모두 x 혹은 하이픈(-)과 매치된다. `[^-x]`, `[^x-]`는 x 혹은 하이픈이 아닌 모든 문자와 매치된다.

## POSIX 문자 집합(POSIX Character Classes)
---
POSIX(Portable Operating System Interface)는 IEEE가 관리하는 표준의 모임이다. 여기에는 정규 표현식 표준(ISO/IEC/IEEE 9945:2009)이 들어가 있고, `[[:xxxx:]]`와 같은 형식의 문자 클래스 집합을 제공한다. 여기서 xxxx에는 digit이나 word 같은 이름이 들어간다. 만약에 `[:xxxx:]`를 부정하고 싶으면 `[:^xxxx:]`와 같이 쓰면 된다.

![[Attachments_Regex_P09.png]]

## 약칭 문자 집합(Shorthand Character Set)
---
자주 사용되는 문자 집합에 대해서 약칭 문자 집합을 지원한다. 이러한 약칭 문자 집합은 대괄호 내부와 외부에서 모두 사용할 수 있다.

![[Attachments_Regex_P10.png]]

여기서 괄호 안에 부정 약칭(negated shorthands)을 사용할 때는 주의하자. 예를 들어서 `[\D\S]`는 `[^\d\s]`와 같지 않다. 후자의 정규식은 숫자도 공백도 아닌 모든 문자와 매치된다. 그러나 전자는 *숫자($A$)가 아니거나 공백($B$)이 아닌 모든 문자와 매치된다.* 따라서 `[\D\S]`는 어떤 문자와도 매치된다. $A^C\cup B^C = (A\cap B)^C$이기 때문이다.

# 4. 수량자(Quantifier)
----
보통 수량자는 **가능한 한 많은 문자열을 매치**시키려고 시도한다. 그래서 이를 흔히 `탐욕적 수량자(greedy quantifier)`라고 부른다. 그럼 `게으른 수량자(lazy quantifier)`도 있을까? 물론 있다. 게으른 수량자는 탐욕적 수량자와는 반대로 가장 작은, 최소한의 문자열을 매치시키려고 시도한다. 

## 탐욕적 수량자(greedy quantifier)
### ?: 문자가 없거나, 하나만 있으면 일치
물음표(?)는 이전에 등장한 토큰을 선택 토큰(optional)으로 만든다. 따라서 이전 토큰은 등장할 수도 있고 등장하지 않아도 매치된다. 예를 들어서 `colou?r`는 `colour`와 `color` 모두 일치한다.

### `*`: 문자가 없거나, 하나 이상 있으면 일치
별표(`*`)는 이전에 등장한 토큰이 **0번 이상 등장하면 매치**된다.

### +: 문자가 하나 이상 있으면 일치
더하기(`+`)는 이전에 등장한 토큰이 **1번 이상 등장하면 매치**된다.

### {min,max}: min번 이상, max번 이하인 경우 일치 
여기서 min은 최소 일치 수를 나타내는 0 혹은 양의 정수이고, max는 최대 일치 수를 나타내는 min과 같거나 큰 양의 정수이다. 쉼표(,)가 있지만 최댓값이 생략된 경우에는 최대 무한 번 일치할 수 있다는 뜻이 된다. 따라서 `{0,1}`은 ?와 같고, `{0,}`은 `*`와 같고, `{1,}`은 `+`와 같다. 쉼표와 최댓값을 모두 생략하면 정규식 엔진이 토큰을 최솟값 만큼 반복하도록 지시한다.

```REGEX
\b[1-9][0-9]{3}\b
\b[1-9][0-9]{2,4}\b
```

## 게으른 수량자(lazy quantifier)
`.+?`, `.*?`

# 5. 그룹화(Grouping)
## 1. 하위 패턴(Subpatterns)
소괄호(`()`) 안에 정규식을 넣어서 그룹으로 만들 수 있다. 이렇게 하면 그룹 전체에 수량자를 적용하거나 얼터네이션의 범위를 제한할 수 있다. 그룹화에는 소괄호만 사용할 수 있다. 대괄호는 문자 집합에서 쓰이고, 중괄호는 `{n,m}` 수량자에서 사용된다. 정규식은 이를 그룹화할 뿐만 아니라 번호가 매겨진 캡처 그룹(capturing group)을 만든다. 이는 왼쪽에서 오른쪽으로 1부터 번호가 자동으로 부여된다. 여기서 번호가 0인 캡처 그룹에는 정규식 패턴 전체와 일치하는 텍스트가 들어간다.

예를 들어서 "the red king"이라는 문자열이 패턴 `((red|white) (king|queen))`과 일치할 경우에 캡처된 부분 문자열은 `red king`, `red`, `king`이 있을 것이다. `red king`은 번호 1, `red`는 번호 2, `king`은 번호 3이 된다. 이처럼 하위 패턴은 중첩될 수 있다.

## 2. 비캡처 그룹(Non-Capturing Groups)
캡처할 필요가 없는 경우에는 비캡처 그룹을 사용하여 최적화할 수 있다. 이 비캡처 그룹은 패턴과 일치하는 문자열이나 시작과 끝 인덱스를 메모리에 저장되지 않으므로 약간의 공간을 절약하고 속도가 약간 빨라진다. 그리고 번호 역시 할당되지 않으므로 복잡한 정규식 사이에 새로운 비캡처 그룹을 삽입해도 기존 그룹에 할당된 번호는 변하지 않으므로 매우 유용하다. 

```REGEX
(?:하위패턴)
```

## 2. 역참조(Backreference)
`\n` 혹은 `$n`을 사용하면 n번째로 캡처 그룹을 참조할 수 있다. 예를 들어서 `\1` 혹은 `$1`은 첫 번째로 캡처 그룹을 참조한다. 동일한 역참조를 두 번 이상 재사용할 수도 있다. 따라서 `([a-c]x\1x\1`은 `axaxa`, `bxbxb`, `cxcxc`와 매치된다. 대부분의 정규식 종류(flavor)에서는 최대 99개의 캡처 그룹과 역참조를 제공한다. 따라서 정규식에 99개의 캡처 그룹이 있는 경우에는 `\99`까지 사용할 수 있다.

현대의 거의 모든 정규식 표현 엔진은 번호가 매겨진 캡처 그룹과 역참조를 지원한다. 수많은 그룹과 역참조가 있는 긴 정규 표현식은 읽기 어려울 수 있다. 정규식 중간에 캡처 그룹을 추가하거나 제거하면 추가되거나 제거된 그룹 뒤에 있는 모든 그룹의 번호가 달라지기 때문에 정규식을 유지보수하기가 특히 힘들 수 있다.

## 3. 이름 있는 그룹(Named Groups)
말 그대로 그룹에 이름을 붙일 수 있다. 따라서 정수뿐만 아니라 이름으로도 접근할 수 있게 된다. 여기서 이름에는 구두점(punctuation) 문자를 쓸 수 없으며 숫자로 시작할 수 없다.

```REGEX
(?<이름>패턴패턴)
```

# 6. 백트래킹(Backtracking)
백트래킹은 정규식 패턴에 선택적 수량자 혹은 대체 구문(alternation)이 .. 백트래킹은 정규식에 있어서 핵심이며, 표현식을 강력하고 유연하게 만들고 매우 복잡한 패턴을 매치시킬 수 있도록 만든다. 그와 동시에, 이 힘은 대가를 치르게 된다. 백트래킹은 정규식 엔진의 성능에 영향을 미치는 가장 영향력이 큰 단일 요인인 경우가 많다. 다행히 개발자는 정규 표현식 엔진의 동작과 백트래킹을 사용하는 방식을 제어할 수 있다.

## 백트래킹이 없는 선형 비교
정규식 패턴에 선택적 수량자 혹은 대체 구문이 없는 경우에는 정규식 엔진은 선형 시간에 실행된다. 즉, 정규식 엔진이 패턴에 있는 첫 번째 요소를 입력 문자열의 텍스트와 매치시킨 후에, 패턴의 다음 요소를 입력 문자열에 있는 다음 문자 혹은 문자 그룹과 매치시킨다. 이러한 작업은 매치가 성공하거나 실패할 때까지 계속된다. 아래의 예시를 고려해보자.

```csharp
using System;
using System.Text.RegularExpressions;

public class Example
{
   public static void Main()
   {
      string input = "needing a reed";
      string pattern = @"e{2}\w\b";
      foreach (Match match in Regex.Matches(input, pattern))
         Console.WriteLine("{0} found at position {1}",
                           match.Value, match.Index);
   }
}
```

결과적으로 정규식 엔진은 아래 표와 같이 정규식 패턴을 입력 문자열과 매치시키려고 시도한다.

| 연산 | 패턴 내 위치 | 문자열 내 위치           | 결과          |
| ---- | ------------ | ------------------------ | ------------- |
| 1    | e            | "needing a reed" (idx 0) | 매치 X        |
| 2    | e            | "eeding a reed" (idx 1)  | 매치 가능성 O |
| 3    | e{2}         | "eding a reed" (idx 2)   | 매치 가능성 O |
| 4    | `\w`         | "ding a reed" (idx 3)    | 매치 가능성 O |
| 5    | `\b`         | "ing a reed" (idx 4)     | 매치 가능성 X |
| 6    | e            | "eding a reed" (idx 2)   | 매치 가능성 O |
| 7    | e{2}         | "ding a reed" (idx 3)    | 매치 가능성 X |
| 8    | e            | "ding a reed" (idx 3)    | 매치 X        |
| 9    | e            | "ing a reed" (idx 4)     | 매치 X        |
| 10   | e            | "ng a reed" (idx 5)      | 매치 X        |
| 11   | e            | "g a reed" (idx 6)       | 매치 X        |
| 12   | e            | " a reed" (idx 7)        | 매치 X        |
| 13   | e            | "a reed" (idx 8)         | 매치 X        |
| 14   | e            | " reed" (idx 9)          | 매치 X        |
| 15   | e            | "reed" (idx 10)          | 매치 X        |
| 16   | e            | "eed" (idx 11)           | 매치 가능성 O |
| 17   | e{2}         | "ed" (idx 12)            | 매치 가능성 O |
| 18   | `\w`         | "d" (idx 13)             | 매치 가능성 O |
| 19   | `\b`         | "" (idx 14)              | 매치됨        |

정규식 패턴에 선택적 수량자나 대체 구문이 없는 경우 정규식 패턴을 입력 문자열과 매치시키는 데 필요한 최대 비교 수는 입력 문자열의 길이와 거의 같다. 위의 경우, 정규식 엔진은 길이가 13인 문자열에서 가능한 매치를 확인하기 위해서 19번의 비교를 수행한다. 즉, 정규식 엔진은 선택적 수량자 혹은 대체 구문이 없는 경우 거의 선형 시간에 실행된다.

## 선택적 수량자와 대체 구문이 있는 상황에서의 백트래킹
정규식에 선택적 한정자 혹은 대체 구문이 있는 경우에는 입력 문자열의 평가가 더 이상 선형적이지 않다. 하위 패턴(subexpression, 혹은 하위 표현식)에서 다음 요소로 넘어갈 때 매치가 실패하면 정규식 엔진은 정규식을 입력 문자열과 일치시키기 위해서 성공적으로 매치한 것의 일부를 포기하고 이전에 저장된 상태로 돌아갈 수 있다. 일치하는 항목을 찾기 위해서 이전에 저장된 상태로 돌아가는 이 과정을 백트래킹(backtracking, 혹은 역추적)이라고 한다.

예를 들어서, 문자열 "es"와 앞에 오는 모든 문자와 일치하는 정규식 패턴 `.*(es)`을 생각해보자. 아래 예에서 볼 수 있듯이 입력 문자열이 "Essential services is provided by regular expressions"인 경우 패턴은 "expressions"의 ("es"를 포함한) "es"까지의 모든 문자열과 매치된다.

```REGEX
**Essential services is provided by regular expres**sions
```

이를 위해서 정규식 엔진은 아래와 같이 백트래킹을 사용한다.

1. 전체 입력 문자열과 `.*`(0개 이상의 모든 항목과 일치함)를 매치시킨다.
2. 정규식 패턴에서 "e"를 매치하려고 시도한다. 그러나 입력 문자열에서 매치시킬 수 있는 문자가 남아있지 않다.
3. 마지막으로 성공한 매치인 "Essential services are provided by regular expressions"을 거슬러 올라가면서 "e"를 문장 끝에 있는 문자와 매치시키려고 시도한다. 매치가 실패한다.
4. 매치된 하위 문자열이 "Essential services are provided by regular expr"가 될 때까지 한 번에 한 문자씩 계속 거슬러 올라간다. 그 후에 패턴의 "e"를 "essions"에 있는 "e"와 비교하여 매치되는 항목을 찾는다.
5. 패턴의 "s"를 매치된 "e" 문자 뒤에 오는 "s"와 비교한다. 매치가 성공적으로 끝났다.

![[Attachments_Regex_P01.gif]]

백트래킹을 사용할 때 정규식 패턴을 길이가 55인 입력 문자열과 매치시키려면 67번의 비교 연산이 필요하다. 일반적으로 정규식 패턴에 하나의 대체 구문 혹은 하나의 선택적 수량자가 있는 경우에는 패턴을 일치시키는 데 필요한 비교 연산의 수는 입력 문자열의 길이에 두 배 이상이다.

## 중첩된 선택적 수량자가 있는 상황에서의 백트래킹
정규식 패턴을 매치시키는 데 필요한 비교 연산의 수는 패턴에 여러 대체 구문(alternation constructs)이 들어간 경우, 아니면 중첩된 대체 구문이 들어간 경우, 혹은 가장 일반적으로 중첩된 선택적 수량자가 들어간 경우에 기하급수적으로 증가할 수 있다. 예를 들어서 정규식 패턴 `^(a+)+$`는 하나 이상의 "a" 문자를 포함한 전체 문자열과 일치하도록 만들어졌다. 아래 예제에서는 "aaaaaa"와 "aaaaa!"가 주어지지만 여기서 첫 번째 문자열만 패턴과 매치된다.

```csharp
public class Example
{
   public static void Main()
   {
      string pattern = "^(a+)+$";
      string[] inputs = { "aaaaaa", "aaaaa!" };
      Regex rgx = new Regex(pattern);
      Stopwatch sw;

      foreach (string input in inputs) {
         sw = Stopwatch.StartNew();
         Match match = rgx.Match(input);
         sw.Stop();
         if (match.Success)
            Console.WriteLine("Matched {0} in {1}", match.Value, sw.Elapsed);
         else
            Console.WriteLine("No match found in {0}", sw.Elapsed);
      }
   }
}
```

이 예제를 실행시켜보면 정규식 엔진은 "aaaaaa"를 확인하는 것보다 "aaaaa!"를 확인하는 데 약 2배의 시간이 걸리는 것을 볼 수 있다. 이는 실패한 매치가 항상 최악의 시나리오이기 때문이다. 정규식 엔진은 매치가 실패했다고 결론을 내리기 위해서, 정규식을 사용하여 데이터를 통해 가능한 모든 경로를 따라가야 한다. 중첩된 괄호는 수많은 추가 경로를 만들어낸다. 정규식 엔진은 아래와 같은 작업을 수행하여 두 번째 문자열이 패턴과 일치하지 않는다고 결론짓는다.

1. 문자열의 시작 부분에 있는지 확인한 다음 문자열에서 첫 5개의 문자와 패턴 `a+`를 매치시킨다. 그 다음에 문자열에 문자 "a"의 추가 그룹이 없는지 확인한다. 마지막으로 문자열의 마지막인지 확인한다. 문자열에 하나의 추가 문자(!)가 남아 있기 때문에 매치는 실패한다. 이 실패한 매치에는 9번의 비교 연산이 필요하다. 정규식 엔진은 또한 "a"(매치 1), "aa"(매치 2), "aaa"(매치 3), "aaaa"(매치 4)와 같이 상태 정보를 저장한다.
2. 이전에 저장했던 매치 4로 돌아간다. 여기서 다시 추가 문자 "a" 하나가 있음을 확인한다. 그 후 문자열의 마지막인지 확인한다. 문자열에 하나의 추가 문자(!)가 남아 있기 때문에 매치가 실패한다. 이 실패한 매치에는 4번의 비교 연산이 필요하다. 지금까지, 총 13번의 비교 연산이 수행되었다.
3. 이전에 저장했던 매치 3으로 돌아간다. 여기서 다시 추가 문자 "a"가 두 개 있음을 확인한다. 그러나 문자열의 마지막인지 검사하는 부분에서 다시 실패한다.

![[Attachments_Regex_P02.gif]]

정규식과 입력 문자열을 비교하는 작업은 정규식 엔진이 가능한 모든 매치 조합을 시도할 때까지 계속되며, 매치되는 항목이 없다고 결론짓는다. 중첩된 수량자 때문에 이 비교는 $O(2n)$ 혹은 지수 연산이며, 여기서 n은 입력 문자열의 문자 수이다. 이는 최악의 경우 길이가 30인 입력 문자열은 약 1,073,741,824번의 비교가 필요하고, 길이가 40인 입력 문자열은 약 1,099,511,627,776번의 비교가 필요하다는 것을 의미한다. 이러한 길이 이상의 문자열을 사용하는 경우에는 정규식 메서드가 정규식 패턴과 일치하지 않는 입력을 처리할 때 완료하는 데 시간이 매우 오래 걸릴 수 있다.

## 원자 그룹(Atomic Groups)
현재 위치에서 원자 그룹 내부에 있는 패턴과 매치되는 첫 번째 부분 문자열을 찾으면 이를 절대 버리지 않는다(따라서 백트래킹을 할 수 없음). 

```TEXT
(?>A)B
```

# 7. 전후방탐색(Lookaround)
![[Attachments_Regex_P11.png]]

먼저 전후방탐색은 전방탐색(lookahead)과 후방탐색(lookbehind)로 나눌 수 있다. 사전적 정의를 살펴보면 lookahead는 '앞을 내다보다', lookbehind는 '뒤돌아보다'라는 뜻을 가지고 있는데, 우리가 정규식 엔진의 입장에서 생각하면 기억하기가 더 수월해진다.

![[Attachments_Regex_P12.png]]

전방은 ?로 시작하며, 후방은 뒤를 가리키는 듯한 기호인 <가 따라붙어 ?<로 시작한다. 이어서 긍정형에는 일치한다는 기호인 =을 붙이고, 부정형에는 논리 NOT 연산자와 같은 ! 기호가 따라붙는다. 예를 들어서, `A(?=B)`는 'A 앞에 B가 있는 경우'와 같고, `(?<!B)A`는 'A 뒤에 B가 없는 경우'와 같다.

## 7-1. 전방탐색(lookahead)
### 7-1-1. 긍정형 전방탐색(Positive lookahead)
A를 찾지만 뒤에 B가 오는 경우에만 매치된다. 이때, 매치된 문자열에서 B는 제외된다. 예를 들면, `foo(?=bar)`라고 했을 때 `foobar`에 매치되는 게 아니라, `foo`에 매치된다는 의미다.

```REGEX
A(?=B)
```

예를 들어서, 아래와 같은 문자열이 있다고 했을 때 뒤에 '원'이 붙은 것만 가져오고 싶다고 해보자. 이때 매치된 문자열에서 '원'은 제외하고 싶을 때 `[\d,]+(?=원)`이라고 작성할 수 있다.

```TEXT
1,000원
200엔
3,000원
4달러
4,000원
```

### 7-1-2. 부정형 전방탐색(Negative lookahead)
A를 찾지만 뒤에 B가 없는 경우에만 매치된다.

```REGEX
A(?!B)
```

이번에는 위에서 살펴봤던 예시에서 반대로 뒤에 '원'이 붙지 않지 않은 것만 가져오고 싶다고 해보자. `[\d,]+(?!원)`

## 7-2. 후방탐색(lookbehind)
### 7-2-1. 긍정형 후방탐색(Positive lookbehind)
A를 찾지만 앞에 B가 있는 경우에만 매치된다.

```REGEX
(?<=B)A
```

### 7-2-2. 부정형 후방탐색(Negative lookbehind)
A를 찾지만 앞에 B가 없는 경우에만 매치된다.

```REGEX
(?<!B)A
```

#regex
